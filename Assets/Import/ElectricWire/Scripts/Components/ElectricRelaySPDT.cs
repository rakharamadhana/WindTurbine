
//(c8

using UnityEngine;

namespace ElectricWire
{
    public class ElectricRelaySPDT : ElectricComponent
    {
        #region IWire interface

        public override void ConnectWire(GameObject wire, bool isInput, int index)
        {
            base.ConnectWire(wire, isInput, index);

            // When connect a wire
            ActivateOutput();
        }

        public override void DisconnectWire(bool isInput, int index)
        {
            base.DisconnectWire(isInput, index);

            // When disconnect a wire
            // TODO : Think if we need activate on output too?
            // Run function EnergizedByWire() to check if one of the input are energized
            if (isInput)
            {
                EnergizeByWire(false, index);
                ActivateOutput();
            }
        }

        public override float IsGenerateEnergy(int index = -1)
        {
            // This is how much energy this component drain
            float thisComponentDrainEnergy = IsOn() ? drainEnergy : 0f;
            // This is the total generated energy read from the input of this component
            // And the energy generated by this component is added first
            float totalGenerateEnergy = IsOn() ? generateEnergy : 0f;

            // If this component is On and do not generate energy by itself
            if (IsOn() && totalGenerateEnergy == 0f)
            {
                // Check input to see if we receive generated energy
                if (IsWireConnected(true, 0))
                    totalGenerateEnergy += wireInput[0].GetComponent<WireControl>().wireConnectorOutput.IsGenerateEnergy();

                // Check each output to see it we send generated energy
                if (wireInput[1] != null && wireInput[1].GetComponent<WireControl>().wireConnectorOutput.IsEnergized() &&
                    wireInput[1].GetComponent<WireControl>().wireConnectorOutput.IsOn())
                {
                    if (wireOutput[1] != null)
                    {
                        if (1 != index && IsWireConnected(false, 1))
                            totalGenerateEnergy -= wireOutput[1].GetComponent<WireControl>().wireConnectorInput.IsDrainEnergy();
                    }
                }
                else
                {
                    if (wireOutput[0] != null)
                    {
                        if (0 != index && IsWireConnected(false, 0))
                            totalGenerateEnergy -= wireOutput[0].GetComponent<WireControl>().wireConnectorInput.IsDrainEnergy();
                    }
                }

                // If this component drain energy, remove it from the total generated energy
                totalGenerateEnergy -= thisComponentDrainEnergy;

                if (totalGenerateEnergy < 0f)
                    totalGenerateEnergy = 0f;
            }

            return IsOn() ? totalGenerateEnergy : 0f;
        }

        public override float IsDrainEnergy(int index = -1)
        {
            // If request is from input 0, return drain, otherwise return 0f
            // But only return drain of the active output
            if (index == 0 || index == -1)
            {
                float totalDrainEnergy = drainEnergy;
                if (wireInput[1] != null && wireInput[1].GetComponent<WireControl>().wireConnectorOutput.IsEnergized() &&
                    wireInput[1].GetComponent<WireControl>().wireConnectorOutput.IsOn())
                {
                    if (wireOutput[1] != null)
                    {
                        if (IsWireConnected(false, 1))
                            totalDrainEnergy += wireOutput[1].GetComponent<WireControl>().wireConnectorInput.IsDrainEnergy();
                    }
                }
                else
                {
                    if (wireOutput[0] != null)
                    {
                        if (IsWireConnected(false, 0))
                            totalDrainEnergy += wireOutput[0].GetComponent<WireControl>().wireConnectorInput.IsDrainEnergy();
                    }
                }

                return totalDrainEnergy;
            }
            else
                return 0f;
        }

        public override void EnergizeByWire(bool onOff, int index)
        {
            // The first input is use to energize other component
            // The second input is use to toggle on the relay
            if (index == 0)
            {
                GetSetIsEnergized = onOff;
                ActivateOutput();
            }
            else if (index == 1)
            {
                GetSetIsOn = onOff;
                ActivateOutput();
            }
        }

        #endregion

        public override void ActivateOutput()
        {
            if (GetSetIsOn)
            {
                if (wireOutput[0] != null)
                    wireOutput[0].GetComponent<WireControl>().wireConnectorInput.EnergizeByWire(false);
                if (wireOutput[1] != null)
                    wireOutput[1].GetComponent<WireControl>().wireConnectorInput.EnergizeByWire(GetSetIsEnergized);
            }
            else
            {
                if (wireOutput[0] != null)
                    wireOutput[0].GetComponent<WireControl>().wireConnectorInput.EnergizeByWire(GetSetIsEnergized);
                if (wireOutput[1] != null)
                    wireOutput[1].GetComponent<WireControl>().wireConnectorInput.EnergizeByWire(false);
            }
        }
    }
}
